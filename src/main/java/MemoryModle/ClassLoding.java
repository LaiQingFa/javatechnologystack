package MemoryModle;

public class ClassLoding {
/*
http://blog.csdn.net/u011080472/article/details/51332866

    整个类加载过程中，除了在加载阶段用户应用程序可以自定义类加载器参与之外，
    其余所有的动作完全由虚拟机主导和控制。到了初始化才开始执行类中定义的Java程序代码
    （亦及字节码），但这里的执行代码只是个开端，它仅限于<clinit>（）方法。
    类加载过程中主要是将Class文件（准确地讲，应该是类的二进制字节流）加载到虚拟机内存中，
    真正执行字节码的操作，在加载完成后才真正开始。

    从Java虚拟机的角度来说，只存在两种不同的类加载器：
    一种是启动类加载器（Bootstrap ClassLoader），这个类加载器使用C++语言实现
    （HotSpot虚拟机中），是虚拟机自身的一部分；另一种就是所有其他的类加载器，
    这些类加载器都有Java语言实现，独立于虚拟机外部，并且全部继承自java.lang.ClassLoader。

    自定义的类加载器，它们之间的层次关系被称为类加载器的双亲委派模型。该模型要求除了顶层的启动类加载器外，其余的类加载器都应该有自己的父类加载器，
    而这种父子关系一般通过组合（Composition）关系来实现，而不是通过继承（Inheritance）。






*/


}
