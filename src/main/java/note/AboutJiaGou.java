package note;

public class AboutJiaGou {
/*

传统架构：
    一个Tomcat-->流量变多-->加服务器(多个tomcat中放相同代码,tomcat集群)
        -->用户越来越多。提升cpu，内存，网络带宽等配置--->用户爆炸增长，继续加服务器

         前台和后台系统分离，首页流量最大，把不同流量的模块拆分成不同的系统，交互通信由socket实现

存在问题：
1、	模块之间耦合度太高，其中一个升级其他都得升级
2、	开发困难，各个团队开发最后都要整合一起
3、	系统的扩展性差
4、不能灵活的进行分布式部署。


解决：

  优点：把模块才分成独立的董超，单点运行。如果某一个点压力大可以对着一个点单独增加配置，其他的点不受影响

  缺点：系统之间需要额外的工作量来进行接口的开发。
        把系统拆分成多个工程，要完成整个系统的工程需要多个工程协作完成，这种形式叫做分布式。


  分布式的架构---->把系统按照模块拆分成多个子系统

  优点：
1、把模块拆分，使用接口通信，降低模块之间的耦合度。
2、把项目拆分成若干个子项目，不同的团队负责不同的子项目。
3、增加功能时只需要再增加一个子项目，调用其他系统的接口就可以。
4、可以灵活的进行分布式部署。

缺点：
系统之间交互需要使用远程通信，接口开发增加工作量。

*/


}
